#include <Windows.h>
#include <gl/GL.h>
#include "box2d/Box2D.h"
#include "misc.h"
#include "game.h"


//relacja skali boxa do ekranu
//box to screen
const float b2s = 10.0f;
//screen to box
const float s2b = 1.0f/b2s;


struct Filters
{
  enum Bits
  {
    Bit_Boundary = 1,
    Bit_Starship = 2,
    Bit_Shield = 4,
    Bit_Bullet = 8,
    Bit_Asteroid_Core = 16,
    Bit_Asteroid_Shield = 32,
    Bit_Asteroid_Parts = 64,
  };
};


void  Game::createGameBoundary(float dx, float dy)
{
  //tworzymy statyczny obiekt, ograniczaj¹cy pole gry
  //struktura b2BodyDef domyœlnie typ ma ustawiony na b2_staticBody, dla jasnoœci przyk³adu ustawiamy j¹ jawnie
  b2BodyDef bd;
  bd.type = b2_staticBody;
  boundary.body = b2world->CreateBody(&bd);
  b2FixtureDef fd;
  fd.density = 0.0f; //gêstoœæ materia³u - dla obiektu statycznego nie ma to znaczenia, dla obiektów dynamicznych - gêstoœæ*pole powierzchni = masa obiektu.
  fd.friction = 5;   //wspó³czynnik tarcia przy styku cia³ - w tym przyk³adzie mo¿e byæ dowolny
  fd.restitution = 0; //wspó³czynnik odbicia - mno¿nik dla prêdkoœci odbicia po kolizji; 0 wygasza odbicie
  //filtr kolizji
  fd.filter.categoryBits = Filters::Bit_Boundary; //boundary kolidowaæ bêdzie z ...
  fd.filter.maskBits = Filters::Bit_Starship; //... naszym statkiem
  b2ChainShape cs;
  b2Vec2 boundary_verts[4] = { s2b*b2Vec2(-dx/2, dy/2), s2b*b2Vec2(dx/2, dy/2), s2b*b2Vec2(dx/2, -dy/2), s2b*b2Vec2(-dx/2, -dy/2) };
  cs.CreateLoop(boundary_verts, 4);
  fd.shape = &cs;
  boundary.body->CreateFixture(&fd);
}

void  Game::createStarship()
{
  //dynamiczny obiekt
  b2BodyDef bd;
  bd.type = b2_dynamicBody;
  bd.userData = &starship;  //userData - miejsce na nasze dane w obiekcie b2Body - bêdzie to pointer -> Object starship
  starship.body = b2world->CreateBody(&bd);
  b2FixtureDef fd;
  fd.density = 1.0f;
  fd.friction = 1.0f;
  fd.restitution = 0.0f;
  //filtry kolizji
  fd.filter.categoryBits = Filters::Bit_Starship;
  //z czym kolidujemy ? 
  fd.filter.maskBits = Filters::Bit_Boundary | Filters::Bit_Asteroid_Core | Filters::Bit_Asteroid_Shield | Filters::Bit_Asteroid_Parts;
  b2PolygonShape ps;
  //PolygonShape -> pe³ny wielok¹t, max 8 wierzcho³ków, definiuj¹cych obiekt wypuk³y
  //wierzcho³ki musza byæ podane w kolejnosci CCW (przeciwnej do ruchu wskazówek zegara)
  b2Vec2 ship_verts[] = { s2b*b2Vec2(20.0f, 0), s2b*b2Vec2(-16.0f, 10.0f), s2b*b2Vec2(-16.0f, -10.0f) };
  ps.Set(ship_verts, sizeof(ship_verts)/sizeof(ship_verts[0]));
  fd.shape = &ps;
  starship.body->CreateFixture(&fd);

  //ustawimy wygaszanie ruchu liniowego 
  starship.body->SetLinearDamping(0.25f);
  //i obrotowego dla statku
  starship.body->SetAngularDamping(1.5f);
}
void  Game::createBullet(const b2Vec2& vpos, const b2Vec2& vdir)
{
  Object obj;

  b2BodyDef bd;
  bd.type = b2_dynamicBody;
  bd.position = vpos;
  bd.bullet = true;
  bd.linearVelocity = s2b*200.0f * vdir;
  obj.body = b2world->CreateBody(&bd);
  b2FixtureDef fd;
  fd.density = 1.0f;
  fd.friction = 0.0f;
  fd.restitution = 0.75f;
  //groupIndex - elementy bêd¹ce w tej samej grupie mog¹ ze sob¹ 
  //kolidowaæ -> groupIndex <= 0 
  //nie kolidowaæ -> groupIndex > 0
  fd.filter.groupIndex = Filters::Bit_Bullet;
  //fd.filter.groupIndex = -Filters::Bit_Bullet;  //w tym wypadku bêd¹ kolidowaæ ze sob¹

  //maski kolizji opisuj¹ kolizje z pozosta³ymi elementami 
  fd.filter.categoryBits = Filters::Bit_Bullet;
  fd.filter.maskBits = Filters::Bit_Asteroid_Core | Filters::Bit_Asteroid_Shield;
  b2CircleShape cs;
  cs.m_radius = s2b * 2.0f;
  fd.shape = &cs;
  obj.body->CreateFixture(&fd);

  vbullets.push_back(obj);
}

void  Game::create(int win_size_x, int win_size_y)
{
  win_dx = (float)win_size_x;
  win_dy = (float)win_size_y;
  scroll_x = 0;
  scroll_y = 0;

  tex_0 = loadTexture("res/sample_tex.png");


  //tworzenie œwiata - bez grawitacji
  b2world = new b2World(b2Vec2(0, 0));

  //tworzenie ograniczenia pola gry
  createGameBoundary(win_dx, win_dy);

  //tworzymy statek
  createStarship();

  //przygotowaæ std::vectory
  vbullets.reserve(128);
  vparticles.reserve(128);
  vasteroids.reserve(50);
}
void  Game::process(const Input& in)
{

  b2world->Step(1.0f/60, 5, 5);

  //INPUT
  {

    //sterowanie statkiem
    if(in.kb['A'] == Input::Hold)
    {
      //nadajemy statkowi moment obrotowy w kierunku CW (clockwise)
      starship.body->ApplyTorque(100, true);
    }
    if(in.kb['D'] == Input::Hold)
    {
      //nadajemy statkowi moment obrotowy w kierunku CCW (counter clockwise)
      starship.body->ApplyTorque(-100, true);
    }
    if(in.kb['W'] == Input::Hold) //przyœpieszanie w przód
    {
      //GetTransform().q -> obiekt b2Rot, jego pola c i s s¹ odpowiednio cosinusem i sinusem k¹ta obrotu obiektu
      //cosinus i sinus odpowiednio tworz¹ dla nas wersor, który bêdzie dla statku kierunku ruchu dla danego k¹ta -> b2Vec2(cosine, sine)
      b2Vec2 vdir(starship.body->GetTransform().q.c, starship.body->GetTransform().q.s);
      //dzia³my si³a w wyznaczonym kierunku
      float forward_force = 20.0f;
      starship.body->ApplyForceToCenter(forward_force*vdir, true);
    }
    if(in.kb['S'] == Input::Hold)//przyœpieszanie w ty³
    {
      b2Vec2 vdir(starship.body->GetTransform().q.c, starship.body->GetTransform().q.s);
      //odwracamy ci¹g, si³a odwrotna ni¿ przy przyœpieszeniu(i mniejsza)
      float backward_force = -10.0f;
      starship.body->ApplyForceToCenter(backward_force*vdir, true);
    }

    //strzelanie
    if(in.ms[0] == Input::Down)
    {
      b2Vec2 ship_pos = starship.body->GetPosition();
      b2Vec2 vdir(starship.body->GetTransform().q.c, starship.body->GetTransform().q.s);
      //ustawienie pocisku 20pixeli od œrodka statku - przed dziobem
      b2Vec2 bullet_pos = ship_pos + s2b*20.0f * vdir;
      createBullet(bullet_pos, vdir);
    }
  }


  //niszczymy pociski jeœli s¹ w odegloœci wiêkszej ni¿ dist_max od statku
  const float dist_max = s2b*280.0f;
  std::vector<Object> vobj2del;
  vobj2del.reserve(32);
  for(size_t q = 0; q<vbullets.size();)
  {
    b2Vec2 vbull_pos = vbullets[q].body->GetPosition();
    if((vbullets[q].body->GetPosition() - starship.body->GetPosition()).LengthSquared() < dist_max*dist_max)
      ++q;
    else
    {
      vobj2del.push_back(vbullets[q]);
      std::swap(vbullets[q], vbullets.back());
      vbullets.resize(vbullets.size()-1);
    }
  }


  //ekran bêdzie porusza³ siê wraz z ruchem statku
  scroll_x = b2s * starship.body->GetPosition().x;
  scroll_y = b2s * starship.body->GetPosition().y;



  for(size_t q = 0; q<vobj2del.size(); ++q)
  {
    b2world->DestroyBody(vobj2del[q].body);
  }

  render();
}

void  Game::destroy()
{
  glDeleteTextures(1, &tex_0.tex_id);
  delete b2world;
  b2world = NULL;
}
void  Game::render()
{
//gl global settings
  glEnable(GL_TEXTURE_2D);
  glBindTexture(GL_TEXTURE_2D, 0);
  glEnable(GL_BLEND);
  glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
  glLineWidth(1.0f);
//camera
  glViewport(0, 0, (int)win_dx, (int)win_dy);
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glFrustum(-1.0f, 1.0f, -win_dy/win_dx, win_dy/win_dx, 1.0f, 100.0f);
  glMatrixMode(GL_MODELVIEW);
  glLoadIdentity();
  glScalef(2.0f/win_dx, 2.0f/win_dx, 1.0f);
  glTranslatef(-scroll_x, -scroll_y, -1.0f);

//clear screen
  glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
  glClear(GL_COLOR_BUFFER_BIT);

//render
  glPushMatrix();

  debug_draw(b2world, b2s);

  glPopMatrix();
}

